name: Continuous Integration

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

env:
  NODE_VERSION: '18'
  CACHE_DEPENDENCY_PATH: package-lock.json

jobs:
  # Security scanning and dependency checks
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.CACHE_DEPENDENCY_PATH }}

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: |
          npm audit --audit-level=moderate --json > audit-results.json || true
          npm audit --audit-level=moderate

      - name: Check for high-risk vulnerabilities
        run: |
          # Check for high or critical vulnerabilities
          if npm audit --audit-level=high 2>/dev/null; then
            echo "‚úÖ No high or critical vulnerabilities found"
          else
            echo "‚ùå High or critical security vulnerabilities found!"
            npm audit --audit-level=high
            exit 1
          fi

      - name: Upload audit results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-audit-results
          path: audit-results.json
          retention-days: 30

  # Code quality and linting
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.CACHE_DEPENDENCY_PATH }}

      - name: Install dependencies
        run: npm ci

      - name: TypeScript type checking
        run: npx tsc --noEmit

      - name: Check for unused dependencies
        run: npx depcheck --no-dev || true

  # Unit and integration tests
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['18', '20']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: ${{ env.CACHE_DEPENDENCY_PATH }}

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests with coverage
        run: npm run test:coverage
        env:
          CI: true

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: matrix.node-version == '18'
        with:
          file: ./coverage/lcov.info
          fail_ci_if_error: false
          verbose: true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-node-${{ matrix.node-version }}
          path: coverage/
          retention-days: 30

  # End-to-end tests
  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.CACHE_DEPENDENCY_PATH }}

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Build application
        run: npm run build

      - name: Run E2E tests
        run: npm run test:e2e
        env:
          CI: true

      - name: Upload E2E results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-results
          path: |
            playwright-report/
            test-results/
          retention-days: 30

  # Build verification
  build:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: [security, quality, test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.CACHE_DEPENDENCY_PATH }}

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Check build size
        run: |
          BUILD_DIR="build"
          if [ -d "dist" ]; then
            BUILD_DIR="dist"
          fi

          if [ -d "$BUILD_DIR" ]; then
            BUILD_SIZE=$(du -sh $BUILD_DIR | cut -f1)
            echo "üì¶ Build size: $BUILD_SIZE"

            echo "üîç Largest files in build:"
            find $BUILD_DIR -type f -size +500k -exec ls -lh {} \; | sort -k5 -hr | head -5 || true
          else
            echo "‚ùå Build directory not found!"
            exit 1
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            build/
            dist/
          retention-days: 7

  # Final status check
  status:
    name: CI Status
    runs-on: ubuntu-latest
    needs: [security, quality, test, e2e, build]
    if: always()

    steps:
      - name: Check overall status
        run: |
          echo "üîç Checking CI status..."

          if [[ "${{ needs.security.result }}" == "failure" ]] || \
             [[ "${{ needs.quality.result }}" == "failure" ]] || \
             [[ "${{ needs.test.result }}" == "failure" ]] || \
             [[ "${{ needs.e2e.result }}" == "failure" ]] || \
             [[ "${{ needs.build.result }}" == "failure" ]]; then
            echo "‚ùå One or more critical checks failed!"
            exit 1
          fi

          echo "‚úÖ All critical checks passed!"

